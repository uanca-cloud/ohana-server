#Credentials and Secrets Section
locals {
  rabbitmq-admin            = "ohana_amqp"
  rabbitmq-federation-admin = "ohana_federation_admin"
  rabbitmq-cwr              = "ohana_amqp_cwr"
  rabbitmq-r                = "ohana_amqp_r"
}

resource "random_password" "rabbitmq-admin" {
  length           = 32
  special          = true
  numeric          = true
  lower            = true
  upper            = true
  override_special = "#%&*-_=+[]{}?"
}

resource "random_password" "rabbitmq-federation-admin" {
  length           = 32
  special          = true
  numeric          = true
  lower            = true
  upper            = true
  override_special = "#%&*-_=+[]{}?"
}

resource "random_password" "rabbitmq-cwr" {
  length           = 32
  special          = true
  numeric          = true
  lower            = true
  upper            = true
  override_special = "#%&*-_=+[]{}?"
}

resource "random_password" "rabbitmq-r" {
  length           = 32
  special          = true
  numeric          = true
  lower            = true
  upper            = true
  override_special = "#%&*-_=+[]{}?"
}

resource "azurerm_key_vault_secret" "rabbitmq-credentials-admin" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-devops-kv-terraform]
  name         = "rabbitmq-credentials-admin"
  value        = "${local.rabbitmq-admin}:${random_password.rabbitmq-admin.result}"
  key_vault_id = azurerm_key_vault.ohana-devops-kv.id
}

resource "azurerm_key_vault_secret" "rabbitmq-fqdn" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-devops-kv-terraform]
  name         = "rabbitmq-fqdn"
  value        = local.rabbitmq-fqdn
  key_vault_id = azurerm_key_vault.ohana-devops-kv.id
}

resource "azurerm_key_vault_secret" "rabbitmq-federation-admin-username" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-gen-kv-terraform]
  name         = "rabbitmq-federation-admin-username"
  value        = local.rabbitmq-federation-admin
  key_vault_id = azurerm_key_vault.ohana-gen-kv.id
}

resource "azurerm_key_vault_secret" "rabbitmq-federation-admin-password" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-gen-kv-terraform]
  name         = "rabbitmq-federation-admin-password"
  value        = random_password.rabbitmq-federation-admin.result
  key_vault_id = azurerm_key_vault.ohana-gen-kv.id
}

resource "azurerm_key_vault_secret" "rabbitmq-connection-string-cwr" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-gen-kv-terraform]
  name         = "rabbitmq-connection-string-cwr"
  value        = "amqps://${local.rabbitmq-cwr}:${urlencode(random_password.rabbitmq-cwr.result)}@${local.rabbitmq-fqdn}"
  key_vault_id = azurerm_key_vault.ohana-gen-kv.id
}

resource "azurerm_key_vault_secret" "rabbitmq-connection-string-r" {
  depends_on   = [azurerm_key_vault_access_policy.ohana-gen-kv-terraform]
  name         = "rabbitmq-connection-string-r"
  value        = "amqps://${local.rabbitmq-r}:${urlencode(random_password.rabbitmq-r.result)}@${local.rabbitmq-fqdn}"
  key_vault_id = azurerm_key_vault.ohana-gen-kv.id
}

#Helm Section
resource "helm_release" "rabbitmq" {
  depends_on = [
    data.azurerm_kubernetes_cluster.aks, kubectl_manifest.amqp-cert
  ]
  name        = "rabbitmq"
  chart       = "./helm/rabbitmq-10.3.2"
  max_history = 10
  timeout     = 900
  namespace   = kubernetes_namespace.ohana.metadata.0.name

  values = [
    "${file("./helm/rabbitmq-10.3.2/values.yaml")}"
  ]

  set {
    name  = "clustering.rebalance"
    value = true
  }
  set {
    name  = "clustering.forceBoot"
    value = true
  }
  set {
    name  = "replicaCount"
    value = 1
  }
  set {
    name  = "persistence.storageClass"
    value = "azurefile"
  }
  set {
    name  = "persistence.size"
    value = "10Gi"
  }
  set {
    name  = "auth.username"
    value = local.rabbitmq-admin
  }
  set {
    name  = "auth.password"
    value = random_password.rabbitmq-admin.result
  }
  set {
    name  = "service.type"
    value = "LoadBalancer"
  }
  set {
    name  = "service.loadBalancerIP"
    value = data.azurerm_public_ip.rmq-loadbalancer-ip.ip_address
  }
  set {
    name  = "service.portEnabled"
    value = false
  }
  set {
    name  = "service.managerPortEnabled"
    value = false
  }
  set {
    name  = "service.annotations"
    value = "service.beta.kubernetes.io/azure-load-balancer-resource-group: ${data.azurerm_resource_group.network-rg.name}"
  }
  set {
    name  = "auth.tls.enabled"
    value = true
  }
  set {
    name  = "auth.tls.existingSecret"
    value = lower(local.amqp_certificate_name)
  }
  #   set {
  #     name  = "auth.tls.autoGenerated"
  #     value = true
  #   }
  set {
    name  = "auth.tls.existingSecretFullChain"
    value = true
  }
  set {
    name  = "auth.tls.failIfNoPeerCert"
    value = false
  }
  set {
    name  = "auth.tls.sslOptionsVerify"
    value = "verify_none"
  }
  set {
    name  = "auth.tls.sslOptionsDepth"
    value = 5
  }
  set {
    name  = "auth.tls.managementListenerSsl"
    value = true
  }
  set {
    name  = "auth.tls.managementListenerPort"
    value = 15671
  }
  set {
    name  = "auth.tls.managementListenerPortName"
    value = "tls-stats"
  }
  set {
    name  = "service.extraPorts[0].name"
    value = "tls-stats"
  }
  set {
    name  = "service.extraPorts[0].port"
    value = 15671
  }
  set {
    name  = "service.extraPorts[0].targetPort"
    value = 15671
  }
  set {
    name  = "extraConfiguration"
    value = <<-EOT
            management.tcp.port = {{ .Values.containerPorts.manager }}
            management.ssl.port = {{ .Values.auth.tls.managementListenerPort }}
            management.ssl.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
            management.ssl.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
            management.ssl.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
            management.ssl.versions.1 = tlsv1.3
            management.ssl.versions.2 = tlsv1.2
            management.hsts.policy = max-age=31536000;
            ssl_options.depth = {{ .Values.auth.tls.sslOptionsDepth }}
            ssl_options.versions.1 = tlsv1.3
            ssl_options.versions.2 = tlsv1.2
            cluster_name = ${local.rabbitmq-fqdn}
          EOT
  }
  set {
    name  = "communityPlugins"
    value = "https://github.com/rabbitmq/rabbitmq-message-timestamp/releases/download/v3.10.0/rabbitmq_message_timestamp-3.10.0.ez"
  }
  set {
    name  = "extraPlugins"
    value = local.var.INFRASTRUCTURE.ENVIRONMENT == "HFX" ? "rabbitmq_federation rabbitmq_federation_management rabbitmq_message_timestamp" : "rabbitmq_federation rabbitmq_federation_management"
  }
  set {
    name  = "metrics.enabled"
    value = "true"
  }
  set {
    name  = "metrics.serviceMonitor.enabled"
    value = "true"
  }
  set {
    name  = "metrics.serviceMonitor.namespace"
    value = kubernetes_namespace.ohana.metadata.0.name
  }
}

resource "kubectl_manifest" "amqp-cert" {
  depends_on = [data.azurerm_kubernetes_cluster.aks]
  yaml_body  = <<-YAML
    apiVersion: spv.no/v2beta1
    kind: AzureKeyVaultSecret
    metadata:
      name: ${lower(local.amqp_certificate_name)}
      namespace: ${kubernetes_namespace.ohana.metadata.0.name}
    spec:
      vault:
        name: ${local.amqp_certificate_kv}
        object:
          name: ${local.amqp_certificate_name}
          type: certificate
      output:
        secret:
          name: ${lower(local.amqp_certificate_name)}
          type: kubernetes.io/tls
          chainOrder: ensureserverfirst
    YAML
}

#RabbitMQ Configuration Section
provider "rabbitmq" {
  endpoint = "https://${local.rabbitmq-fqdn}:15671"
  username = local.rabbitmq-admin
  password = random_password.rabbitmq-admin.result
  insecure = true #temporary until certificates get resolved
}

resource "rabbitmq_vhost" "vhost" {
  depends_on = [helm_release.rabbitmq]
  name       = "/"
}

resource "rabbitmq_user" "rabbitmq-federation-admin" {
  depends_on = [helm_release.rabbitmq]
  name       = local.rabbitmq-federation-admin
  password   = random_password.rabbitmq-federation-admin.result
  tags       = ["administrator"]
}

resource "rabbitmq_user" "rabbitmq-cwr" {
  depends_on = [helm_release.rabbitmq]
  name       = local.rabbitmq-cwr
  password   = random_password.rabbitmq-cwr.result
}

resource "rabbitmq_user" "rabbitmq-r" {
  depends_on = [helm_release.rabbitmq]
  name       = local.rabbitmq-r
  password   = random_password.rabbitmq-r.result
}

resource "rabbitmq_permissions" "rabbitmq-federation-admin" {
  depends_on = [helm_release.rabbitmq]
  user       = rabbitmq_user.rabbitmq-federation-admin.name
  vhost      = rabbitmq_vhost.vhost.name

  permissions {
    configure = ".*"
    write     = ".*"
    read      = ".*"
  }
}

resource "rabbitmq_permissions" "rabbitmq-cwr" {
  depends_on = [helm_release.rabbitmq]
  user       = rabbitmq_user.rabbitmq-cwr.name
  vhost      = "/"

  permissions {
    configure = "^(.*csa-watchChat|.*csa-watchChannel|from-csa-.*)$"
    write     = "^(.*csa-watchChat|from-csa-.*)$"
    read      = "^(csa-watchChat|from-csa-.*)$"
  }
}

resource "rabbitmq_permissions" "rabbitmq-r" {
  depends_on = [helm_release.rabbitmq]
  user       = rabbitmq_user.rabbitmq-r.name
  vhost      = "/"

  permissions {
    configure = "^$"
    write     = "^$"
    read      = "^(.*csa-watchChat)$"
  }
}
