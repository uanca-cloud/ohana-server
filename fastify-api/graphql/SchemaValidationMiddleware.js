const createLocation = require('./location/CreateLocationSchemaValidation'),
    updateLocation = require('./location/UpdateLocationSchemaValidation'),
    removeLocation = require('./location/RemoveLocationSchemaValidation'),
    updatePushNotificationsConfig = require('./device/UpdatePushNotificationsConfigResolverSchemaValidation'),
    locationSettings = require('./location/LocationSettingsSchemaValidation'),
    updateLocationSetting = require('./location/UpdateLocationSettingSchemaValidation'),
    generateFamilyInvitationSmsByPatient = require('./family/GenerateFamilyInvitationSmsSchemaByPatientValidation'),
    generateFamilyInvitationUrlByPatient = require('./family/GenerateFamilyInvitationUrlByPatientSchemaValidation'),
    authenticationChallenge = require('./family/AuthenticationChallengeSchemaValidation'),
    authenticationResponse = require('./family/AuthenticationResponseSchemaValidation'),
    registrationChallenge = require('./family/RegistrationChallengeSchemaValidation'),
    registrationResponse = require('./family/RegistrationResponseSchemaValidation'),
    assignCaregiverToPatientResolver = require('./patient/AssignCaregiverToPatientSchemaValidation'),
    enrollPatient = require('./patient/EnrollPatientSchemaValidation'),
    patient = require('./patient/PatientSchemaValidation'),
    updatePatient = require('./patient/UpdatePatientSchemaValidation'),
    adminCreateOrRefreshSession = require('./session/AdminCreateOrRefreshSessionSchemaValidation'),
    caregiverCreateOrRefreshSession = require('./session/CaregiverCreateOrRefreshSessionSchemaValidation'),
    finalizeFamilyMemberRegistration = require('./family/FinalizeFamilyMemberRegistrationSchemaValidation'),
    updateFamilyMember = require('./family/UpdateFamilyMemberSchemaValidation'),
    removeFamilyMember = require('./family/RemoveFamilyMemberSchemaValidation'),
    commitUpdate = require('./updates/CommitUpdateSchemaValidation'),
    rollbackUpdate = require('./updates/RollbackUpdateSchemaValidation'),
    markUpdateAsRead = require('./updates/MarkUpdateAsReadSchemaValidation'),
    createUpdate = require('./updates/CreateUpdateSchemaValidation'),
    removeAttachmentOnUpdate = require('./updates/RemoveAttachmentOnUpdateSchemaValidation'),
    removeMediaAttachmentOnUpdate = require('./updates/RemoveMediaAttachmentOnUpdateSchemaValidation'),
    addQuickMessageAttachmentOnUpdate = require('./updates/AddQuickMessageAttachmentOnUpdateSchemaValidation'),
    createLocationQuickMessage = require('./quickMessages/CreateLocationQuickMessageSchemaValidation'),
    deleteLocationQuickMessage = require('./quickMessages/DeleteLocationQuickMessageSchemaValidation'),
    locationQuickMessages = require('./quickMessages/LocationQuickMessagesSchemaValidation'),
    updateLocationQuickMessage = require('./quickMessages/UpdateLocationQuickMessageSchemaValidation'),
    quickMessagesByPatient = require('./quickMessages/QuickMessagesByPatientSchemaValidation'),
    updateTenantSetting = require('./tenant/UpdateTenantSettingSchemaValidation'),
    updateLocationQuickMessagesOrder = require('./quickMessages/UpdateLocationQuickMessagesOrderResolverSchemaValidation'),
    auditReportResources = require('./audit/AuditReportResourcesSchemaValidation'),
    createAuditReport = require('./audit/CreateAuditReportSchemaValidation'),
    cancelAuditReport = require('./audit/CancelAuditReportSchemaValidation'),
    updateEULAAcceptanceStatus = require('./user/UpdateEULAAcceptanceStatusSchemaValidation'),
    locationFixedContents = require('./fixedContents/LocationFixedContentsSchemaValidation'),
    createLocationFixedContent = require('./fixedContents/CreateLocationFixedContentsSchemaValidation'),
    updateLocationFixedContent = require('./fixedContents/UpdateLocationFixedContentSchemaValidation'),
    removeLocationFixedContent = require('./fixedContents/DeleteLocationFixedContentsSchemaValidation'),
    updateLocationFixedContentsOrder = require('./fixedContents/UpdateLocationFixedContentsReorderSchemaValidation'),
    fixedContents = require('./fixedContents/FixedContentsSchemaValidation'),
    findPatientInformation = require('./patient/FindPatientInformationSchemaValidation'),
    disassociatePatient = require('./patient/DisassociatePatientSchemaValidation'),
    sendChatMessage = require('./chat/SendChatMessageSchemaValidation'),
    toggleChatForPatient = require('./patient/ToggleChatForPatientSchemaValidation'),
    chatHistory = require('./chat/ChatHistorySchemaValidation'),
    chatMembers = require('./chat/ChatMembersSchemaValidation'),
    patientChatChannel = require('./chat/PatientChatChannelSchemaValidation'),
    markChatMessagesAsRead = require('./chat/MarkChatMessagesAsReadSchemaValidation'),
    changeNotificationLevelForPatient = require('./chat/ChangeNotificationLevelForPatientSchemaValidation'),
    {validate} = require('ohana-shared');

const validation = {
    Query: {
        authenticationChallenge: validate(authenticationChallenge),
        registrationChallenge: validate(registrationChallenge),
        patient: validate(patient),
        quickMessagesByPatient: validate(quickMessagesByPatient),
        locationQuickMessages: validate(locationQuickMessages),
        locationSettings: validate(locationSettings),
        locationFixedContents: validate(locationFixedContents),
        auditReportResources: validate(auditReportResources),
        findPatientInformation: validate(findPatientInformation),
        fixedContents: validate(fixedContents),
        chatHistory: validate(chatHistory),
        chatMembers: validate(chatMembers),
        patientChatChannel: validate(patientChatChannel)
    },
    Mutation: {
        createLocation: validate(createLocation),
        updateLocation: validate(updateLocation),
        removeLocation: validate(removeLocation),
        generateFamilyInvitationSmsByPatient: validate(generateFamilyInvitationSmsByPatient),
        generateFamilyInvitationUrlByPatient: validate(generateFamilyInvitationUrlByPatient),
        authenticationResponse: validate(authenticationResponse),
        registrationResponse: validate(registrationResponse),
        enrollPatient: validate(enrollPatient),
        updatePatient: validate(updatePatient),
        rescanPatient: validate(updatePatient),
        assignCaregiverToPatient: validate(assignCaregiverToPatientResolver),
        adminCreateOrRefreshSession: validate(adminCreateOrRefreshSession),
        caregiverCreateOrRefreshSession: validate(caregiverCreateOrRefreshSession),
        removeFamilyMember: validate(removeFamilyMember),
        finalizeFamilyMemberRegistration: validate(finalizeFamilyMemberRegistration),
        updateFamilyMember: validate(updateFamilyMember),
        commitUpdate: validate(commitUpdate),
        rollbackUpdate: validate(rollbackUpdate),
        markUpdateAsRead: validate(markUpdateAsRead),
        createUpdate: validate(createUpdate),
        createLocationQuickMessage: validate(createLocationQuickMessage),
        deleteLocationQuickMessage: validate(deleteLocationQuickMessage),
        updateLocationQuickMessage: validate(updateLocationQuickMessage),
        updateTenantSetting: validate(updateTenantSetting),
        updateLocationQuickMessagesOrder: validate(updateLocationQuickMessagesOrder),
        updatePushNotificationsConfig: validate(updatePushNotificationsConfig),
        updateLocationSetting: validate(updateLocationSetting),
        removeAttachmentOnUpdate: validate(removeAttachmentOnUpdate),
        removeMediaAttachmentOnUpdate: validate(removeMediaAttachmentOnUpdate),
        addQuickMessageAttachmentOnUpdate: validate(addQuickMessageAttachmentOnUpdate),
        createAuditReport: validate(createAuditReport),
        cancelAuditReport: validate(cancelAuditReport),
        updateEULAAcceptanceStatus: validate(updateEULAAcceptanceStatus),
        createLocationFixedContent: validate(createLocationFixedContent),
        updateLocationFixedContent: validate(updateLocationFixedContent),
        removeLocationFixedContent: validate(removeLocationFixedContent),
        updateLocationFixedContentsOrder: validate(updateLocationFixedContentsOrder),
        disassociatePatient: validate(disassociatePatient),
        sendChatMessage: validate(sendChatMessage),
        toggleChatForPatient: validate(toggleChatForPatient),
        markChatMessagesAsRead: validate(markChatMessagesAsRead),
        changeNotificationLevelForPatient: validate(changeNotificationLevelForPatient)
    }
};

module.exports = validation;
